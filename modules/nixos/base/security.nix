# this file manages most of the security features I use.
{self, config, pkgs, ...}: {
  # Needed to use yubikey stuff correctly
  services = {
    pcscd.enable = true;
    tcsd.enable = true;
  };

  # This sets up agenix, which encrypts secrets as needed for configuration.
  # These secrets are encrypted in the repo, and are re-encrypted for each
  # host that needs them.  Every setting here is about making that work
  age = {
    # each host needs a unique key to decrypt secrets with.  this sets where to find that key,
    # since the key itself can't be stored in the repo.
    identityPaths = [ "/persist/agenix.key" "/nix/agenix.key" ];
    # Rekey is an addon for agenix, and it's settings are handled here.
    rekey = {
      # this can be set to derivation to store the per-host encrypted secrets in derivation
      # only, but this was a buggy mess, so I use Local, which just stores the re-encrypted
      # secrets in the repo.  This does requre adding the per-host encrypted secrets every
      # time `agenix rekey` is run, but it's a minor issue.
      storageMode = "local";
      # This says where to find those re-encrypted secrets.  It must be unique per host, so
      # I just append the hostName to the rekey folder
      localStorageDir = self + "/secrets/rekeyed/${config.networking.hostName}";
      # I use a yubikey to do rekeying, and agenix needs to know about that.
      # so it's added here.
      agePlugins = [ pkgs.age-plugin-yubikey ];
      # Secrets can be generated by agenix without needing to store an existing secret.
      # since this doesn't require a `rekey` field to work, this sets the default path
      # for those secrets when needed
      generatedSecretsDir = self + "/secrets/generated";
      # when rekeying, you need to pick a default key to encrypt with.  I use multiple
      # yubikeys to ensure things can't break easily, and have a script in `flake.nix`
      # automatically fetch the current yubikey identity into this file.  You can
      # technically list multiple, but they all have to exist to work, so I only use
      # the one here.
      masterIdentities = [ "/tmp/yubikey.pub" ];
      # instead, I include the pubkeys of all my yubikeys that are used with this here
      # which ensures they get re-encrypted when I generate new secrets
      extraEncryptionPubkeys = [ 
        "age1yubikey1qtfy343ld8e5sxlvfufa4hh22pm33f6sjq2usx6mmydrmu7txzu7g5xm9vr"
        "age1yubikey1qdnfvhjlw8j2dkksj9eyxaqwldtqw4427cqjjqxulr5t7gn4flnt25lhuyw"
        "age1yubikey1qw43gcah5lr95c4klyavduax0drqd5a95lhs8u2wpzqrtcklw5f0uwruyek"
        "age1yubikey1qwcdxfaalqhntrsrkt7p2nyngdyjc72jr8tehgdzgwwpsl0veflrxncut3x"
      ];
    };
  };

  boot = {
    # enables TPM2 support in systemd at boot time.
    initrd.systemd.enableTpm2 = true;
  };

  security = {
    # This is entirely used for managing tpm2 support.  I enable it to support
    # sealed secrets, hoping to use them with agenix eventually, but right now it
    # is just enabled to ensure any programs I want to use them can.  I control
    # the sealing secret for all my systems.
    tpm2 = {
      enable = true;
      tctiEnvironment.enable = true;
      pkcs11.enable = true;
    };
    # This is enabled to allow homeManger managed sway to be called from logind.
    # I don't remember the details of what this does, but I'll add more if it matters
    # to nix
    polkit = {
      enable = true;
    };
    pam = { 
      services = {
        # swaylock doesn't work unless pam has this entry enabled.
        # simply setting it to a set triggers all the required entries, since
        # the pam nix module looks to see if it exists, not if it contains anything
        swaylock = {};
      };
      # This allows sshAgent to be used for sudo login.  Is only useful on servers
      # where an SSH Agent is used to connect
      sshAgentAuth = {
        enable = true;
      };
    };
  };

  environment = {
    systemPackages = with pkgs; [
      tpm2-tools
      tpm-tools
      tpmmanager
      yubikey-manager
    ];
  };
}
